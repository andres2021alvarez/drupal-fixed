<?php

/**
 * @file
 * Shared Components module - Componentes globales para multisite.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function shared_components_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.shared_components':
      return '<p>' . t('MÃ³dulo para componentes compartidos entre sitios.') . '</p>';
  }
}

/**
 * Implements hook_page_attachments().
 *
 */
function shared_components_page_attachments(array &$attachments) {

  $module_handler = \Drupal::service('module_handler');
  $module_path = $module_handler->getModule('shared_components')->getPath();
  $component_path = $module_path . '/components';


  $main_js = $module_path . '/build/js/main.script.js';
  if (file_exists(DRUPAL_ROOT . '/' . $main_js)) {
    $attachments['#attached']['html_head'][] = [
      [
        '#tag' => 'script',
        '#attributes' => [
          'src' => '/' . $main_js,
          'type' => 'text/javascript',
        ],
      ],
      'shared_components_global_js',
    ];
    \Drupal::logger('shared_components')->info('Main JS cargado: @file', ['@file' => $main_js]);
  }
  else {
    \Drupal::logger('shared_components')->warning('Main JS no encontrado: @file', ['@file' => $main_js]);
  }

  if (!is_dir(DRUPAL_ROOT . '/' . $component_path)) {
    \Drupal::logger('shared_components')->warning('Directorio de componentes no encontrado: @path', ['@path' => $component_path]);
    return;
  }

  $components = scandir(DRUPAL_ROOT . '/' . $component_path);
  \Drupal::logger('shared_components')->info('Componentes encontrados: @components', ['@components' => implode(', ', $components)]);

  foreach ($components as $component) {
    if ($component == '.' || $component == '..') {
      continue;
    }

    $full_component_path = DRUPAL_ROOT . '/' . $component_path . '/' . $component;

    if (!is_dir($full_component_path)) {
      continue;
    }

    $css_file = $component_path . '/' . $component . '/' . $component . '.css';
    $full_css_path = DRUPAL_ROOT . '/' . $css_file;

    if (file_exists($full_css_path)) {
      $attachments['#attached']['html_head'][] = [
        [
          '#tag' => 'link',
          '#attributes' => [
            'rel' => 'stylesheet',
            'type' => 'text/css',
            'href' => '/' . $css_file,
            'media' => 'all',
          ],
        ],
        'shared_components_' . $component . '_css',
      ];
      \Drupal::logger('shared_components')->info('CSS cargado para @component: @file', [
        '@component' => $component,
        '@file' => $css_file,
      ]);
    }
    else {
      \Drupal::logger('shared_components')->info('CSS no encontrado para @component: @file', [
        '@component' => $component,
        '@file' => $css_file,
      ]);
    }

    $js_file = $component_path . '/' . $component . '/' . $component . '.js';
    $full_js_path = DRUPAL_ROOT . '/' . $js_file;

    if (file_exists($full_js_path)) {
      $attachments['#attached']['html_head'][] = [
        [
          '#tag' => 'script',
          '#attributes' => [
            'src' => '/' . $js_file,
            'type' => 'text/javascript',
          ],
        ],
        'shared_components_' . $component . '_js',
      ];
      \Drupal::logger('shared_components')->info('JS cargado para @component: @file', [
        '@component' => $component,
        '@file' => $js_file,
      ]);
    }
    else {
      \Drupal::logger('shared_components')->info('JS no encontrado para @component: @file', [
        '@component' => $component,
        '@file' => $js_file,
      ]);
    }
  }
}

/**
 * Implements hook_library_info_build().
 *
 */
function shared_components_library_info_build() {
  $libraries = [];
  $module_handler = \Drupal::service('module_handler');
  $module_path = $module_handler->getModule('shared_components')->getPath();
  $component_path = $module_path . '/components';

  if (!is_dir(DRUPAL_ROOT . '/' . $component_path)) {
    return $libraries;
  }

  $components = scandir(DRUPAL_ROOT . '/' . $component_path);

  foreach ($components as $component) {
    if ($component == '.' || $component == '..') {
      continue;
    }

    $full_component_path = DRUPAL_ROOT . '/' . $component_path . '/' . $component;

    if (!is_dir($full_component_path)) {
      continue;
    }

    $library = [];

    $css_file = $component_path . '/' . $component . '/' . $component . '.css';
    if (file_exists(DRUPAL_ROOT . '/' . $css_file)) {
      $library['css']['theme'][$css_file] = [];
    }

    $js_file = $component_path . '/' . $component . '/' . $component . '.js';
    if (file_exists(DRUPAL_ROOT . '/' . $js_file)) {
      $library['js'][$js_file] = [];
    }

    if (!empty($library)) {
      $libraries[$component] = $library;
    }
  }

  return $libraries;
}

/**
 * Implements hook_preprocess_html().
 *
 */
function shared_components_preprocess_html(&$variables) {
  $module_handler = \Drupal::service('module_handler');
  $module_path = $module_handler->getModule('shared_components')->getPath();
  $component_path = $module_path . '/components';

  if (!is_dir(DRUPAL_ROOT . '/' . $component_path)) {
    return;
  }

  $components = scandir(DRUPAL_ROOT . '/' . $component_path);

  foreach ($components as $component) {
    if ($component == '.' || $component == '..') {
      continue;
    }

    $full_component_path = DRUPAL_ROOT . '/' . $component_path . '/' . $component;

    if (is_dir($full_component_path)) {
      $library_exists = \Drupal::service('library.discovery')->getLibraryByName('shared_components', $component);
      if ($library_exists) {
        $variables['#attached']['library'][] = 'shared_components/' . $component;
      }
    }
  }
}
