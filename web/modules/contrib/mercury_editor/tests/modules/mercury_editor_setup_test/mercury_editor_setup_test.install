<?php

use Drupal\node\Entity\NodeType;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\paragraphs\Entity\ParagraphsType;

function mercury_editor_setup_test_install() {

  $test_node_type = NodeType::load('me_test_ct');
  if (!$test_node_type) {
    $type = NodeType::create([
      'id' => 'me_test_ct',
      'type' => 'me_test_ct',
      'name' => 'Mercury Editor Test Content Type',
      'description' => 'A content type for testing Mercury Editor.',
    ]);
    $status = $type->save();
  }

  // Create and configure a Layout Paragraphs section paragraph type.
  $paragraphs_type = ParagraphsType::load('me_test_section');
  if (!$paragraphs_type) {

    $layoutPluginManager = \Drupal::service('plugin.manager.core.layout');
    $layoutDefinitions = $layoutPluginManager->getDefinitions();
    $default_layouts = array_filter($layoutDefinitions, function ($definition) {
      return $definition->get('provider') == 'layout_discovery';
    });
    $layout_keys = array_map(function ($definition) {
      return $definition->id();
    }, $default_layouts);
    $layout_labels = array_map(function ($definition) {
      return $definition->getLabel()->__toString();
    }, $default_layouts);
    $available_layouts = array_combine($layout_keys, $layout_labels);

    $paragraphs_type = ParagraphsType::create([
      'id' => 'me_test_section',
      'label' => 'Section',
      'enabled_behaviors' => [
        'layout_paragraphs',
        'style_options',
      ],
      'behavior_plugins' => [
        'layout_paragraphs' => [
          'enabled' => TRUE,
          'available_layouts' => $available_layouts,
        ],
      ],
    ]);
    $paragraphs_type->save();
  }

  // Create and configure the text component.
  $paragraphs_type = ParagraphsType::load('me_test_text');
  if (!$paragraphs_type) {
    $paragraphs_type = ParagraphsType::create([
      'id' => 'me_test_text',
      'label' => 'Text',
      'enabled_behaviors' => [
        'style_options',
      ],
      'behavior_plugins' => [
        'style_options' => [
          'enabled' => TRUE,
        ],
      ],
    ]);
    $paragraphs_type->save();

    $field_storage = FieldStorageConfig::loadByName('paragraph', 'field_me_test_text');
    if (!$field_storage) {
      // Add a paragraphs field.
      $field_storage = FieldStorageConfig::create([
        'field_name' => 'field_me_test_text',
        'entity_type' => 'paragraph',
        'type' => 'text_long',
        'cardinality' => '1',
      ]);
      $field_storage->save();
    }
    $field_config = FieldConfig::loadByName('paragraph', 'me_test_text', 'field_me_test_text');
    if (!$field_config) {
      $field = FieldConfig::create([
        'field_storage' => $field_storage,
        'bundle' => 'me_test_text',
        'label' => 'Text',
      ]);
      $field->save();
    }

    $form_display = \Drupal::service('entity_display.repository')->getFormDisplay('paragraph', 'me_test_text');
    $form_display = $form_display->setComponent('field_me_test_text', ['type' => 'text_textfield']);
    $form_display->save();

    $view_display = \Drupal::service('entity_display.repository')->getViewDisplay('paragraph', 'me_test_text');
    $view_display->setComponent('field_me_test_text', ['type' => 'text_default', 'label' => 'hidden']);
    $view_display->save();
  }

  // Create and configure an image component.
  $paragraphs_type = ParagraphsType::load('me_test_image');
  if (!$paragraphs_type) {
    $paragraphs_type = ParagraphsType::create([
      'id' => 'me_test_image',
      'label' => 'Image',
      'enabled_behaviors' => [
        'style_options',
      ],
      'behavior_plugins' => [
        'style_options' => [
          'enabled' => TRUE,
        ],
      ],
    ]);
    $paragraphs_type->save();

    $field_storage = FieldStorageConfig::loadByName('paragraph', 'field_me_test_image');
    if (!$field_storage) {
      // Add a paragraphs field.
      $field_storage = FieldStorageConfig::create([
        'field_name' => 'field_me_test_image',
        'entity_type' => 'paragraph',
        'type' => 'entity_reference',
        'settings' => [
          'target_type' => 'media',
        ],
        'cardinality' => '1',
      ]);
      $field_storage->save();
    }
    $field_config = FieldConfig::loadByName('paragraph', 'me_test_image', 'field_me_test_image');
    if (!$field_config) {
      $field = FieldConfig::create([
        'field_storage' => $field_storage,
        'bundle' => 'me_test_image',
        'label' => 'Image',
        'settings' => [
          'handler_settings' => [
            'target_bundles' => [
              'image' => 'image',
            ],
            'sort' => [
              'field' => '_none',
              'direction' => 'ASC',
            ],
            'auto_create' => FALSE,
            'auto_create_bundle' => FALSE,
          ],
        ],
      ]);
      $field->save();
    }

    $form_display = \Drupal::service('entity_display.repository')->getFormDisplay('paragraph', 'me_test_image');
    $form_display = $form_display->setComponent('field_me_test_image', ['type' => 'media_library_widget']);
    $form_display->save();

    $view_display = \Drupal::service('entity_display.repository')->getViewDisplay('paragraph', 'me_test_image');
    $view_display->setComponent('field_me_test_image', ['type' => 'entity_reference_entity_view', 'label' => 'hidden']);
    $view_display->save();
  }

  // Create and configure a gallery component.
  $paragraphs_type = ParagraphsType::load('me_test_gallery');
  if (!$paragraphs_type) {
    $paragraphs_type = ParagraphsType::create([
      'id' => 'me_test_gallery',
      'label' => 'Image Gallery',
      'enabled_behaviors' => [
        'style_options',
      ],
      'behavior_plugins' => [
        'style_options' => [
          'enabled' => TRUE,
        ],
      ],
    ]);
    $paragraphs_type->save();

    $field_storage = FieldStorageConfig::loadByName('paragraph', 'field_me_test_title');
    if (!$field_storage) {
      // Add a paragraphs field.
      $field_storage = FieldStorageConfig::create([
        'field_name' => 'fielfield_me_test_titled_title',
        'entity_type' => 'paragraph',
        'type' => 'string',
        'cardinality' => '1',
      ]);
      $field_storage->save();
    }
    $field_config = FieldConfig::loadByName('paragraph', 'gallery', 'field_me_test_title');
    if (!$field_config) {
      $field = FieldConfig::create([
        'field_storage' => $field_storage,
        'bundle' => 'me_test_gallery',
        'label' => 'Gallery Title',
      ]);
      $field->save();
    }

    $form_display = \Drupal::service('entity_display.repository')->getFormDisplay('paragraph', 'me_test_gallery');
    $form_display = $form_display->setComponent('field_me_test_title', ['type' => 'string_textfield']);
    $form_display->save();

    $view_display = \Drupal::service('entity_display.repository')->getViewDisplay('paragraph', 'me_test_gallery');
    $view_display->setComponent('field_me_test_title', ['type' => 'string', 'label' => 'hidden']);
    $view_display->save();

    $field_storage = FieldStorageConfig::loadByName('paragraph', 'field_me_test_gallery_items');
    if (!$field_storage) {
      // Add a paragraphs field.
      $field_storage = FieldStorageConfig::create([
        'field_name' => 'field_me_test_gallery_items',
        'entity_type' => 'paragraph',
        'type' => 'entity_reference',
        'settings' => [
          'target_type' => 'media',
        ],
        'cardinality' => '-1',
      ]);
      $field_storage->save();
    }
    $field_config = FieldConfig::loadByName('paragraph', 'me_test_gallery', 'field_me_test_gallery_items');
    if (!$field_config) {
      $field = FieldConfig::create([
        'field_storage' => $field_storage,
        'bundle' => 'me_test_gallery',
        'label' => 'Gallery Items',
        'settings' => [
          'handler_settings' => [
            'target_bundles' => [
              'image' => 'image',
            ],
            'sort' => [
              'field' => '_none',
              'direction' => 'ASC',
            ],
            'auto_create' => FALSE,
            'auto_create_bundle' => FALSE,
          ],
        ],
      ]);
      $field->save();
    }

    $form_display = \Drupal::service('entity_display.repository')->getFormDisplay('paragraph', 'me_test_gallery');
    $form_display = $form_display->setComponent('field_me_test_gallery_items', ['type' => 'media_library_widget']);
    $form_display->save();

    $view_display = \Drupal::service('entity_display.repository')->getViewDisplay('paragraph', 'me_test_gallery');
    $view_display->setComponent('field_me_test_gallery_items', ['type' => 'entity_reference_entity_view', 'label' => 'hidden']);
    $view_display->save();

  }

  // Create and configure a video component.
  $paragraphs_type = ParagraphsType::load('me_test_video');
  if (!$paragraphs_type) {
    $paragraphs_type = ParagraphsType::create([
      'id' => 'me_test_video',
      'label' => 'Video',
      'enabled_behaviors' => [
        'style_options',
      ],
      'behavior_plugins' => [
        'style_options' => [
          'enabled' => TRUE,
        ],
      ],
    ]);
    $paragraphs_type->save();

    $field_storage = FieldStorageConfig::loadByName('paragraph', 'field_me_test_video');
    if (!$field_storage) {
      // Add a paragraphs field.
      $field_storage = FieldStorageConfig::create([
        'field_name' => 'field_me_test_video',
        'entity_type' => 'paragraph',
        'type' => 'entity_reference',
        'settings' => [
          'target_type' => 'media',
        ],
        'cardinality' => '1',
      ]);
      $field_storage->save();
    }
    $field_config = FieldConfig::loadByName('paragraph', 'video', 'field_me_test_video');
    if (!$field_config) {
      $field = FieldConfig::create([
        'field_storage' => $field_storage,
        'bundle' => 'me_test_video',
        'label' => 'Video',
        'settings' => [
          'handler_settings' => [
            'target_bundles' => [
              'remote_video' => 'remote_video',
            ],
            'sort' => [
              'field' => '_none',
              'direction' => 'ASC',
            ],
            'auto_create' => FALSE,
            'auto_create_bundle' => FALSE,
          ],
        ],
      ]);
      $field->save();
    }

    $form_display = \Drupal::service('entity_display.repository')->getFormDisplay('paragraph', 'me_test_video');
    $form_display = $form_display->setComponent('field_me_test_video', ['type' => 'media_library_widget']);
    $form_display->save();

    $view_display = \Drupal::service('entity_display.repository')->getViewDisplay('paragraph', 'me_test_video');
    $view_display->setComponent('field_me_test_video', ['type' => 'entity_reference_entity_view', 'label' => 'hidden']);
    $view_display->save();
  }

  // Create and configure a card component.
  $paragraphs_type = ParagraphsType::load('me_test_card');
  if (!$paragraphs_type) {
    $paragraphs_type = ParagraphsType::create([
      'id' => 'me_test_card',
      'label' => 'Card',
      'enabled_behaviors' => [
        'style_options',
      ],
      'behavior_plugins' => [
        'style_options' => [
          'enabled' => TRUE,
        ],
      ],
    ]);
    $paragraphs_type->save();

    $field_storage = FieldStorageConfig::loadByName('paragraph', 'field_me_test_title');
    if (!$field_storage) {
      // Add a paragraphs field.
      $field_storage = FieldStorageConfig::create([
        'field_name' => 'field_me_test_title',
        'entity_type' => 'paragraph',
        'type' => 'string',
        'cardinality' => '1',
      ]);
      $field_storage->save();
    }
    $field_config = FieldConfig::loadByName('paragraph', 'me_test_card', 'field_me_test_title');
    if (!$field_config) {
      $field = FieldConfig::create([
        'field_storage' => $field_storage,
        'bundle' => 'me_test_card',
        'label' => 'Heading',
      ]);
      $field->save();
    }

    $form_display = \Drupal::service('entity_display.repository')->getFormDisplay('paragraph', 'me_test_card');
    $form_display = $form_display->setComponent('field_me_test_title', ['type' => 'string_textfield']);
    $form_display->save();

    $view_display = \Drupal::service('entity_display.repository')->getViewDisplay('paragraph', 'me_test_card');
    $view_display->setComponent('field_me_test_title', ['type' => 'string', 'label' => 'hidden']);
    $view_display->save();

    $field_storage = FieldStorageConfig::loadByName('paragraph', 'field_me_test_media');
    if (!$field_storage) {
      // Add a paragraphs field.
      $field_storage = FieldStorageConfig::create([
        'field_name' => 'field_me_test_media',
        'entity_type' => 'paragraph',
        'type' => 'entity_reference',
        'settings' => [
          'target_type' => 'media',
        ],
        'cardinality' => '1',
      ]);
      $field_storage->save();
    }
    $field_config = FieldConfig::loadByName('paragraph', 'me_test_card', 'field_me_test_media');
    if (!$field_config) {
      $field = FieldConfig::create([
        'field_storage' => $field_storage,
        'bundle' => 'me_test_card',
        'label' => 'Media',
        'settings' => [
          'handler_settings' => [
            'target_bundles' => [
              'image' => 'image',
              'remote_video' => 'remote_video',
            ],
            'sort' => [
              'field' => '_none',
              'direction' => 'ASC',
            ],
            'auto_create' => FALSE,
            'auto_create_bundle' => FALSE,
          ],
        ],
      ]);
      $field->save();
    }

    $form_display = \Drupal::service('entity_display.repository')->getFormDisplay('paragraph', 'me_test_card');
    $form_display = $form_display->setComponent('field_me_test_media', ['type' => 'media_library_widget']);
    $form_display->save();

    $view_display = \Drupal::service('entity_display.repository')->getViewDisplay('paragraph', 'me_test_card');
    $view_display->setComponent('field_me_test_media', ['type' => 'entity_reference_entity_view', 'label' => 'hidden']);
    $view_display->save();

    $field_storage = FieldStorageConfig::loadByName('paragraph', 'field_me_test_text');
    if (!$field_storage) {
      // Add a paragraphs field.
      $field_storage = FieldStorageConfig::create([
        'field_name' => 'field_me_test_text',
        'entity_type' => 'paragraph',
        'type' => 'text_long',
        'cardinality' => '1',
      ]);
      $field_storage->save();
    }
    $field_config = FieldConfig::loadByName('paragraph', 'me_test_card', 'field_me_test_text');
    if (!$field_config) {
      $field = FieldConfig::create([
        'field_storage' => $field_storage,
        'bundle' => 'me_test_card',
        'label' => 'Text',
      ]);
      $field->save();
    }

    $form_display = \Drupal::service('entity_display.repository')->getFormDisplay('paragraph', 'me_test_card');
    $form_display = $form_display->setComponent('field_text', ['type' => 'text_me_test_textfield']);
    $form_display->save();

    $view_display = \Drupal::service('entity_display.repository')->getViewDisplay('paragraph', 'me_test_card');
    $view_display->setComponent('field_me_test_text', ['type' => 'text_default', 'label' => 'hidden']);
    $view_display->save();

    $field_storage = FieldStorageConfig::loadByName('paragraph', 'field_me_test_link');
    if (!$field_storage) {
      // Add a paragraphs field.
      $field_storage = FieldStorageConfig::create([
        'field_name' => 'field_me_test_link',
        'entity_type' => 'paragraph',
        'type' => 'link',
        'cardinality' => '1',
      ]);
      $field_storage->save();
    }
    $field_config = FieldConfig::loadByName('paragraph', 'me_test_card', 'field_me_test_link');
    if (!$field_config) {
      $field = FieldConfig::create([
        'field_storage' => $field_storage,
        'bundle' => 'me_test_card',
        'label' => 'Link / Call to Action',
      ]);
      $field->save();
    }

    $form_display = \Drupal::service('entity_display.repository')->getFormDisplay('paragraph', 'me_test_card');
    $form_display = $form_display->setComponent('field_me_test_link', ['type' => 'link_default']);
    $form_display->save();

    $view_display = \Drupal::service('entity_display.repository')->getViewDisplay('paragraph', 'me_test_card');
    $view_display->setComponent('field_me_test_link', ['type' => 'link', 'label' => 'hidden']);
    $view_display->save();

  }

  $handler_settings = [
    'target_bundles' => NULL,
    'negate' => FALSE,
    'target_bundles_drag_drop' => [
      'me_test_section' => [
        'weight' => 0,
        'enabled' => TRUE,
      ],
      'me_test_text' => [
        'weight' => 1,
        'enabled' => TRUE,
      ],
      'me_test_image' => [
        'weight' => 2,
        'enabled' => TRUE,
      ],
      'me_test_gallery' => [
        'weight' => 3,
        'enabled' => TRUE,
      ],
      'me_test_video' => [
        'weight' => 4,
        'enabled' => TRUE,
      ],
      'me_test_card' => [
        'weight' => 5,
        'enabled' => TRUE,
      ],
    ],
  ];

  // Add the main paragraphs reference field.
  mercury_editor_setup_test_make_paragraph_field('node', 'me_test_ct', 'field_me_test_content', 'ME Test Content', $handler_settings, 'layout_paragraphs', 'layout_paragraphs');

  $module_data = \Drupal::service('extension.list.module')
    ->reset()
    ->getList();
  $theme_data = \Drupal::service('extension.list.theme')
    ->reset()
    ->getList();

  $m_installer = \Drupal::service('module_installer');

  // Install gin and gin toolbar if available.
  $t_installer = \Drupal::service('theme_installer');
  if (isset($theme_data['gin'])) {
    $t_installer->install(['gin']);
  }
  if (isset($module_data['gin_toolbar'])) {
    $m_installer->install(['gin_toolbar']);
  }

  $config = \Drupal::configFactory();
  // Use gin as admin theme.
  $config->getEditable('system.theme')->set('admin', 'gin')->save();
  // Use Mercury Editor Edit Tray for basic pages.
  $config->getEditable('mercury_editor.settings')->set('bundles', [
    'node' => [
      'me_test_ct' => 'me_test_ct',
    ],
  ])->save();
  // Use claro as the Mercury Editor theme.
  $config->getEditable('mercury_editor.settings')->set('edit_screen_theme', 'claro')->save();

  // Use the vertical toolbar for Gin admin theme.
  $config->getEditable('gin.settings')->set('classic_toolbar', 'vertical')->save();
}

/**
 * Implements hook_uninstall().
 */
function mercury_editor_setup_test_uninstall() {
  $test_ct = NodeType::load('me_test_ct');
  $test_ct->delete();
}
