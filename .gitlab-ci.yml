stages:
  - build
  - validate
  - test

variables:
  COMPOSER_CACHE_DIR: "$CI_PROJECT_DIR/.composer-cache"
  DRUPAL_ROOT: web

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
      auto_cancel:
        on_new_commit: interruptible

.default-php-job:
  image: php:8.3
  interruptible: true
  before_script:
    - apt-get update && apt-get install -y git unzip libpng-dev libjpeg-dev libfreetype6-dev libonig-dev libzip-dev
    - docker-php-ext-configure gd --with-freetype --with-jpeg
    - docker-php-ext-install gd pdo pdo_mysql zip opcache
    - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

.default-node-job:
  image: node:20
  interruptible: true
  before_script:
    - echo "Using global packages via npx"

composer:
  stage: build
  image: php:8.3
  extends: .default-php-job
  script:
    - composer validate --strict
    - composer install --dry-run --no-dev

composer-lint:
  stage: validate
  extends: .default-php-job
  script:
    - composer install --no-dev --optimize-autoloader
    - composer validate --strict

phpcs:
  stage: validate
  extends: .default-php-job
  script:
    - composer install --no-dev --optimize-autoloader
    - composer global config --no-plugins allow-plugins.dealerdirect/phpcodesniffer-composer-installer true
    - composer global require drupal/coder
    - |
      if [ -d "$DRUPAL_ROOT/modules/custom" ] && find $DRUPAL_ROOT/modules/custom -name "*.php" -o -name "*.module" -o -name "*.inc" -o -name "*.install" -o -name "*.test" -o -name "*.profile" -o -name "*.theme" 2>/dev/null | head -1 | grep -q .; then
        ~/.composer/vendor/bin/phpcs --standard=Drupal --extensions=php,module,inc,install,test,profile,theme $DRUPAL_ROOT/modules/custom
      else
        echo "No PHP files found in custom modules"
      fi

phpstan:
  stage: validate
  extends: .default-php-job
  script:
    - composer install --optimize-autoloader
    - composer require --dev phpstan/phpstan phpstan/extension-installer
    - |
      if [ -d "$DRUPAL_ROOT/modules/custom" ] && find $DRUPAL_ROOT/modules/custom -name "*.php" 2>/dev/null | head -1 | grep -q .; then
        vendor/bin/phpstan analyse $DRUPAL_ROOT/modules/custom --level=5 --memory-limit=1G
      else
        echo "No PHP files found in custom modules"
      fi

eslint:
  stage: validate
  extends: .default-node-job
  script:
    - |
      cat > eslint.config.js << 'EOF'
      export default [{
        files: ["**/*.js"],
        languageOptions: {
          ecmaVersion: 2022,
          sourceType: "module"
        }
      }];
      EOF
    - |
      if find $DRUPAL_ROOT/modules/custom $DRUPAL_ROOT/themes/custom -name "*.js" 2>/dev/null | head -1 | grep -q .; then
        npx --yes eslint $DRUPAL_ROOT/modules/custom $DRUPAL_ROOT/themes/custom
      else
        echo "No JavaScript files found - skipping ESLint"
      fi

stylelint:
  stage: validate
  extends: .default-node-job
  script:
    - |
      cat > .stylelintrc.json << 'EOF'
      {
        "rules": {
          "block-no-empty": true,
          "color-no-invalid-hex": true,
          "declaration-colon-space-after": "always",
          "indentation": 2
        }
      }
      EOF
    - npx --yes stylelint "$DRUPAL_ROOT/modules/custom/**/*.{css,scss}" "$DRUPAL_ROOT/themes/custom/**/*.{css,scss}" --allow-empty-input

phpunit:
  stage: test
  extends: .default-php-job
  services:
    - mysql:5.7
  variables:
    MYSQL_DATABASE: drupal
    MYSQL_USER: drupal
    MYSQL_PASSWORD: drupal
    MYSQL_ROOT_PASSWORD: root
  script:
    - composer install --optimize-autoloader
    - |
      if [ ! -f vendor/bin/phpunit ]; then
        composer require --dev phpunit/phpunit
      fi
    - |
      if [ -f core/phpunit.xml.dist ]; then
        vendor/bin/phpunit --configuration core/phpunit.xml.dist
      else
        echo "No PHPUnit configuration found - skipping PHPUnit tests"
      fi

phpunit-max-php:
  stage: test
  image: php:8.4
  extends: .default-php-job
  services:
    - mysql:5.7
  variables:
    MYSQL_DATABASE: drupal
    MYSQL_USER: drupal
    MYSQL_PASSWORD: drupal
    MYSQL_ROOT_PASSWORD: root
  script:
    - composer install --optimize-autoloader
    - |
      if [ ! -f vendor/bin/phpunit ]; then
        composer require --dev phpunit/phpunit
      fi
    - |
      if [ -f core/phpunit.xml.dist ]; then
        vendor/bin/phpunit --configuration core/phpunit.xml.dist
      else
        echo "No PHPUnit configuration found"
      fi

sonarqube-check:
  stage: test
  image: sonarsource/sonar-scanner-cli:latest
  interruptible: true
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - git config --global --add safe.directory $CI_PROJECT_DIR
    - sonar-scanner
      -Dsonar.projectKey=$CI_PROJECT_NAME
      -Dsonar.sources=.
      -Dsonar.host.url=$SONAR_HOST_URL
      -Dsonar.login=$SONAR_TOKEN
      -Dsonar.exclusions="**/scripts/**,**/node_modules/**,**/config/**,**/vendor/**,**/.ddev/**,**/.platform/**,**/.scannerwork/**,**/docroot/core/**,**/docroot/modules/contrib/**,**/docroot/themes/contrib/**,**/autoload.php,**/docroot/libraries/**,**/acquia-utils/**,**/components/**,**/files/**,**/settings.php,**/*.settings.php,**/index.php,**/update.php,*.development.php,**/sites.php,**/*.sites.php,**/*.local.php,**/*.environment.php,**/g/**,**/hooks/**,**/factory-hooks/**"
      -Dsonar.inclusions="**/*,**/*.theme,**/*.yml,**/*.php,**/*.module,**/*.twig,**/*.js,**/*.css"
      -Dsonar.php.file.suffixes=php,php3,php4,php5,phtml,inc,module,install,theme
      -Dsonar.projectVersion=$(git rev-parse --abbrev-ref HEAD)
      -Dsonar.analysisCache.enabled=false
  allow_failure: true